//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the T4\Model.tt template.
//
//     Changes to this file will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
//
// THIS WORK IS LICENSED UNDER A CREATIVE COMMONS ATTRIBUTION-NONCOMMERCIAL-
// SHAREALIKE 3.0 UNPORTED LICENSE:
// http://creativecommons.org/licenses/by-nc-sa/3.0/
//
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using System.Xml;

using Rock.Models.Cms;
using Rock.Repository.Cms;

namespace Rock.Services.Cms
{
    public partial class BlogService : Rock.Services.Service, Rock.Services.IFeed
    {
        private IBlogRepository _repository;

        public BlogService()
            : this( new EntityBlogRepository() )
        { }

        public BlogService( IBlogRepository BlogRepository )
        {
            _repository = BlogRepository;
        }

        public IQueryable<Rock.Models.Cms.Blog> Queryable()
        {
            return _repository.AsQueryable();
        }

        public Rock.Models.Cms.Blog GetBlog( int id )
        {
            return _repository.FirstOrDefault( t => t.Id == id );
        }

        public void AddBlog( Rock.Models.Cms.Blog Blog )
        {
            if ( Blog.Guid == Guid.Empty )
                Blog.Guid = Guid.NewGuid();

            _repository.Add( Blog );
        }

        public void DeleteBlog( Rock.Models.Cms.Blog Blog )
        {
            _repository.Delete( Blog );
        }

        public void Save( Rock.Models.Cms.Blog Blog, int? personId )
        {
            List<Rock.Models.Core.EntityChange> entityChanges = _repository.Save( Blog, personId );

            if ( entityChanges != null )
            {
                Rock.Services.Core.EntityChangeService entityChangeService = new Rock.Services.Core.EntityChangeService();

                foreach ( Rock.Models.Core.EntityChange entityChange in entityChanges )
                {
                    entityChange.EntityId = Blog.Id;
                    entityChangeService.AddEntityChange( entityChange );
                    entityChangeService.Save( entityChange, personId );
                }
            }
        }

        public string ReturnFeed( int key, int count, string format, out string errorMessage, out string contentType )
        {
            errorMessage = string.Empty;
            contentType = "application/rss+xml";
            
            XmlWriterSettings settings = new XmlWriterSettings();
            settings.Indent = true;
            settings.Encoding = Encoding.UTF8;

            StringBuilder builder = new StringBuilder();

            using ( XmlWriter writer = XmlWriter.Create( builder, settings ) )
            {
                // get blog
                Blog blog = this.GetBlog( key );

                if ( blog == null )
                {
                    errorMessage = "The blog with the id of " + key.ToString() + " could not be found.";
                }
                else
                {
                    writer.WriteStartDocument();

                    // write rss Tags
                    writer.WriteStartElement( "rss" );
                    writer.WriteAttributeString( "version", "2.0" );

                    writer.WriteStartElement( "channel" );
                    writer.WriteElementString( "title", blog.Name );
                    writer.WriteElementString( "link", blog.PublicPublishingPoint );
                    writer.WriteElementString( "description", blog.Description );
                    writer.WriteElementString( "copyright", blog.CopyrightStatement );

                    // get posts
                    var blogPosts = blog.BlogPosts.Take( count );

                    foreach ( BlogPost post in blogPosts )
                    {
                        writer.WriteStartElement( "item" );
                        writer.WriteElementString( "title", post.Title );
                        writer.WriteElementString( "description", post.Content );
                        writer.WriteElementString( "link", "" );
                        writer.WriteElementString( "pubDate", post.PublishDate.ToString() );
                        writer.WriteEndElement();
                    }

                    //  close up tags
                    writer.WriteEndElement();
                    writer.WriteEndElement();
                    writer.WriteEndDocument();
                }
                writer.Flush();
                writer.Close();

            }
            return builder.ToString();
        }
    }
}
