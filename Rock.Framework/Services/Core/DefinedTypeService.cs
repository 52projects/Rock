//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the T4\Model.tt template.
//
//     Changes to this file will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
//
// THIS WORK IS LICENSED UNDER A CREATIVE COMMONS ATTRIBUTION-NONCOMMERCIAL-
// SHAREALIKE 3.0 UNPORTED LICENSE:
// http://creativecommons.org/licenses/by-nc-sa/3.0/
//
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Rock.Models.Core;
using Rock.Repository.Core;

namespace Rock.Services.Core
{
    public partial class DefinedTypeService : Rock.Services.Service
    {
        private IDefinedTypeRepository _repository;

        public DefinedTypeService()
			: this( new EntityDefinedTypeRepository() )
        { }

        public DefinedTypeService( IDefinedTypeRepository DefinedTypeRepository )
        {
            _repository = DefinedTypeRepository;
        }

        public IQueryable<Rock.Models.Core.DefinedType> Queryable()
        {
            return _repository.AsQueryable();
        }

        public Rock.Models.Core.DefinedType GetDefinedType( int id )
        {
            return _repository.FirstOrDefault( t => t.Id == id );
        }
		
        public void AddDefinedType( Rock.Models.Core.DefinedType DefinedType )
        {
            if ( DefinedType.Guid == Guid.Empty )
                DefinedType.Guid = Guid.NewGuid();

            _repository.Add( DefinedType );
        }

        public void AttachDefinedType( Rock.Models.Core.DefinedType DefinedType )
        {
            _repository.Attach( DefinedType );
        }

		public void DeleteDefinedType( Rock.Models.Core.DefinedType DefinedType )
        {
            _repository.Delete( DefinedType );
        }

        public void Save( Rock.Models.Core.DefinedType DefinedType, int? personId )
        {
            List<Rock.Models.Core.EntityChange> entityChanges = _repository.Save( DefinedType, personId );

			if ( entityChanges != null )
            {
                Rock.Services.Core.EntityChangeService entityChangeService = new Rock.Services.Core.EntityChangeService();

                foreach ( Rock.Models.Core.EntityChange entityChange in entityChanges )
                {
                    entityChange.EntityId = DefinedType.Id;
                    entityChangeService.AddEntityChange ( entityChange );
                    entityChangeService.Save( entityChange, personId );
                }
            }
        }

        public void Reorder( List<Rock.Models.Core.DefinedType> DefinedTypes, int oldIndex, int newIndex, int? personId )
        {
            Rock.Models.Core.DefinedType movedDefinedType = DefinedTypes[oldIndex];
            DefinedTypes.RemoveAt( oldIndex );
            if ( newIndex >= DefinedTypes.Count )
                DefinedTypes.Add( movedDefinedType );
            else
                DefinedTypes.Insert( newIndex, movedDefinedType );

            int order = 0;
            foreach ( Rock.Models.Core.DefinedType DefinedType in DefinedTypes )
            {
                if ( DefinedType.Order != order )
                {
                    DefinedType.Order = order;
                    Save( DefinedType, personId );
                }
                order++;
            }
        }
    }
}
