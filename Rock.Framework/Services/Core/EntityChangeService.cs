//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the T4\Model.tt template.
//
//     Changes to this file will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
//
// THIS WORK IS LICENSED UNDER A CREATIVE COMMONS ATTRIBUTION-NONCOMMERCIAL-
// SHAREALIKE 3.0 UNPORTED LICENSE:
// http://creativecommons.org/licenses/by-nc-sa/3.0/
//
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Rock.Models.Core;
using Rock.Repository.Core;

namespace Rock.Services.Core
{
    public partial class EntityChangeService : Rock.Services.Service
    {
        private IEntityChangeRepository _repository;

        public EntityChangeService()
			: this( new EntityEntityChangeRepository() )
        { }

        public EntityChangeService( IEntityChangeRepository EntityChangeRepository )
        {
            _repository = EntityChangeRepository;
        }

        public IQueryable<Rock.Models.Core.EntityChange> Queryable()
        {
            return _repository.AsQueryable();
        }

        public Rock.Models.Core.EntityChange GetEntityChange( int id )
        {
            return _repository.FirstOrDefault( t => t.Id == id );
        }
		
        public IEnumerable<Rock.Models.Core.EntityChange> GetEntityChangesByChangeSet( Guid changeSet )
        {
            return _repository.Find( t => t.ChangeSet == changeSet );
        }
		
        public void AddEntityChange( Rock.Models.Core.EntityChange EntityChange )
        {
            if ( EntityChange.Guid == Guid.Empty )
                EntityChange.Guid = Guid.NewGuid();

            _repository.Add( EntityChange );
        }

        public void AttachEntityChange( Rock.Models.Core.EntityChange EntityChange )
        {
            _repository.Attach( EntityChange );
        }

		public void DeleteEntityChange( Rock.Models.Core.EntityChange EntityChange )
        {
            _repository.Delete( EntityChange );
        }

        public void Save( Rock.Models.Core.EntityChange EntityChange, int? personId )
        {
            List<Rock.Models.Core.EntityChange> entityChanges = _repository.Save( EntityChange, personId );
        }
    }
}
